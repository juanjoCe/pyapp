name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # Self hosted runner on GCP
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      # Working Directory
      - name: Run a one-line script
        run: pwd
      # Test Create VM
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
      # Install GCP SDK test
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2.1.0
      - name: Display Info about the cloud environment
        run: gcloud info      
      # GitHub Actions for build and push 
      - name: Google Artifact Registry Build & Push
        # You may pin to the exact commit or the version.
        # uses: piotr-krusinski/action-google-artifact-registry@9cf02c218758b424473a7ede8bc90272037a8530
        uses: piotr-krusinski/action-google-artifact-registry@v1.0
        with:
          # Google project ID of your project where Artifact Registry is created
          google_project_id: gcp-lab-421817
          # Google Artifact Registry region
          google_artifact_registry_region: us-central1
          # Google Artifact Registry hostname
          google_artifact_registry_hostname: us-central1-docker.pkg.dev
          # Google Artifact Registry repository name
          google_artifact_registry_name: github-actions
          # Base64 version of Google Cloud Platform service key to access Artifact Registry
          service_account_key: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
          # Path to dockerfile
          dockerfile: juanjoCe/pyapp/Dockerfile
          # Name of created image
          image_name: python-webapp
          # Tag list separated by space, if no tag is specified then it will use latest tag (example: tag_1 tag_2 tag_3)
          #tag_list: # optional
          # List of build args that will be used to build docker image
          #build_args: # optional
          # Testing VMs works! Remember to use | for multiple lines
      # - name: Create GCP Compute Engine Instance
      #   run: |
      #     gcloud compute instances create my-instance \
      #       --machine-type=e2-micro \
      #       --zone=us-central1-a \
      #       --image-family=debian-10 \
      #       --image-project=debian-cloud \
      #       --tags=http-server,https-server

      
